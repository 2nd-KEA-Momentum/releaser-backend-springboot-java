server:
  port: 8080

spring:
  datasource:
    url: ${DEV_DB_URL}
    username: ${DEV_DB_USERNAME}
    password: ${DEV_DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true
        use_sql_comments: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
            scope: email,profile

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}

jwt:
  secret:
    key: ${JWT_SECRET_KEY}


cloud:
  aws:
    s3:
      bucket: ${AWS_BUCKET_NAME}
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
      auto: false
    stack:
      auto: false

#app:
#  cors:
#    allowedOrigins: http://localhost:3000 ,http://localhost:8080, https://www.releaser.shop
#  oauth2:
#    # After successfully authenticating with the OAuth2 Provider,
#    # we'll be generating an auth token for the user and sending the token to the
#    # redirectUri mentioned by the client in the /oauth2/authorize request.
#    # We're not using cookies because they won't work well in mobile clients.
#    authorizedRedirectUris:
#      - http://localhost:3000/oauth2/redirect
#      - https://www.releaser.shop/oauth2/redirect

logging.level:
  org.hibernate.SQL: debug
